/*! FactoryJS 0.3.1 */
(function(){var a=[].slice,b=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};define(["underscore","jquery","backbone"],function(c,d,e){var f;return f=function(){function f(a,b){null==b&&(b={}),this.mixins={},this.tagCbs={},this.tagMap={},this.promises={},this.instances={},this.definitions={},this.define("Base",a),this.baseTags=b.baseTags||[],this.on("create",this.handleCreate,this)}return c.extend(f.prototype,e.Events),f.prototype.define=function(a,b,f){var g,h,i,j=this;if(null==f&&(f={}),null!=this.definitions[a]&&!f.override){if(f.silent)return this;throw new Error("Definition already exists :: "+a+" :: user overide option to ignore")}return null==(i=this.promises)[a]&&(i[a]=d.Deferred()),g={options:f},c.isFunction(b.extend)||(b.extend=e.Model.extend),g.constructor=c.isFunction(b)?b:function(){return c.clone(b)},g.constructor.prototype.__factory=function(){return j},h=[a].concat(f.tags).concat(this.baseTags),g.tags=c.uniq(h).filter(function(a){return!!a}),this.instances[a]=[],c.each(g.tags,function(a){return j.tagMap[a]=j.tagMap[a]||[],j.tagCbs[a]=j.tagCbs[a]||[]}),this.definitions[a]=g,this.trigger("define",a,g,f),this.promises[a].resolve(this,a),this},f.prototype.hasDefinition=function(a){return!!this.definitions[a]},f.prototype.whenDefined=function(a){var b;return null==(b=this.promises)[a]&&(b[a]=d.Deferred()),this.promises[a].promise()},f.prototype.fetchDefinition=function(a){var b,c=this;return b=this.whenDefined(a),require([a],function(b){return c.define(a,b)}),b},f.prototype.extend=function(a,b,d,e){var f;if(null==e&&(e={}),f=this.definitions[a],!f)throw new Error("Base Class Not Available :: "+a);if(!c.isObject(d))throw new Error("Invalid Parameter Definition :: expected object :: got "+d.constructor.prototype.toString());return e.tags=[].concat(f.tags,e.tags),this.define(b,f.constructor.extend(d),e)},f.prototype.clone=function(a){var b=this;if(!(a instanceof f))throw new Error("Invalid Argument :: Expected Factory");return c.each(["definitions","mixins","promises"],function(d){return c.defaults(b[d],a[d]),"definitions"===d?c.each(b[d],function(a,c){return b[d][c].constructor.prototype.__factory=function(){return b}}):void 0})},f.prototype.mirror=function(a){var b=this;return this.clone(a),a.on("define",function(a,d,e){return b.define(a,d.constructor,c.extend({silent:!0},e))}),a.on("defineMixin",this.defineMixin,this)},f.prototype.defineMixin=function(a,b,c){if(null==c&&(c={}),null!=this.mixins[a]&&!c.override)throw new Error("Mixin already defined :: "+a+" :: use override option to ignore");return this.mixins[a]=b,this.trigger("defineMixin",a,b,c),this},f.prototype.handleMixins=function(a,b){var d=this;return c.each(b,function(b){var e;if(e=d.mixins[b],!e)throw new Error("Mixin Not Defined :: "+b);return a.mixinOptions=a.mixinOptions||{},c.defaults(a.mixinOptions,e.mixinOptions||{}),c.extend(a,c.omit(e,"mixinOptions")),c.isFunction(a.mixinitialize)?(a.mixinitialize(),a.mixinitialize=function(){}):void 0})},f.prototype.handleInjections=function(a,b){var d=this;return c.each(b,function(b){return a[b]=d.get(b)})},f.prototype.handleCreate=function(a){var b=this;return c.each(a.__tags(),function(d){var e;return null==b.tagCbs[d]&&(b.tagCbs[d]=[]),e=b.tagCbs[d],0!==e.length?c.each(e,function(b){return c.isFunction(b)?b(a):void 0}):void 0})},f.prototype.handleTags=function(a,b,d){var e,f=this;return this.instances[a].push(b),b.__type=function(){return a},b.__tags=function(){return[].slice.call(d)},e=[this.instances[a]],c.each(d,function(a){return null==f.tagMap[a]&&(f.tagMap[a]=[]),f.tagMap[a].push(b),e.push(f.tagMap[a])}),b.__factoryMap=function(){return[].slice.call(e)}},f.prototype.get=function(){var b,d,e,f,g,h,i,j,k,l,m;if(j=arguments[0],b=2<=arguments.length?a.call(arguments,1):[],h=null!=(m=this.instances)[j]?(m=this.instances)[j]:m[j]=[],g=this.instances[j][0],e=this.definitions[j],null==e)throw new Error("Invalid Definition :: "+j+" :: not defined");return d=e.constructor,k=e.options||{},l=!!k.singleton,i=k.mixins||[],f=k.injections||[],l&&g?g:(g=function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(d,b,function(){}),this.handleMixins(g,i),this.handleInjections(g,f),this.handleTags(j,g,e.tags),c.isFunction(g.constructed)&&g.constructed(),g.__dispose=function(a){return function(){return a.dispose(this)}}(this),this.trigger("create",g),g)},f.prototype.verifyTags=function(a){return c.all(a.__factoryMap(),function(c){return b.call(c,a)>=0})},f.prototype.dispose=function(a){return c.each(a.__factoryMap(),function(c){if(b.call(c,a)<0)throw new Error("Instance Not In Factory :: "+a+" :: disposal failed!");return c.splice(c.indexOf(a),1)}),this.trigger("dispose",a)},f.prototype.getConstructor=function(a,b){return null==b&&(b=!1),b?this.definitions[a].constructor:c.chain(this.get).bind(this).partial(a).value()},f.prototype.onTag=function(a,b){var d;if(!c.isString(a))throw new Error("Invalid Argument :: "+typeof a+" provided :: expected String");if(!c.isFunction(b))throw new Error("Invalid Argument :: "+typeof b+" provided :: expected Function");return c.each(this.tagMap[a],b),null==(d=this.tagCbs)[a]&&(d[a]=[]),this.tagCbs[a].push(b)},f.prototype.offTag=function(a,b){var d;if(!c.isString(a))throw new Error("Invalid Argument :: "+typeof a+" provided :: expected String");if(null!=this.tagCbs[a]){if(!c.isFunction(b))return this.tagCbs[a]=[],void 0;if(d=this.tagCbs[a].indexOf(b),-1===d)throw new Error("Callback Not Found :: "+b+" :: for tag "+a);return this.tagCbs[a].splice(d,1)}},f.prototype.isType=function(a,b){return a.__type()===b},f.prototype.getType=function(a){return a.__type()},f}()})}).call(this);