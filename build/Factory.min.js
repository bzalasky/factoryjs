/*! FactoryJS 0.1.2 */
!function(){var a=[].slice;define(["underscore","jquery","backbone"],function(b,c,d){var e;return e=function(){function e(a){this.definitions={},this.instances={},this.mixins={},this.tagMap={},this.tagCbs={},this.promises={},this.define("Base",a),this.on("create",this.handleCreate,this)}return b.extend(e.prototype,d.Events),e.prototype.define=function(a,e,f){var g,h,i=this;if(null==f&&(f={}),null!=this.definitions[a]&&!f.override)throw new Error("Definition already exists :: "+a+" :: user overide option to ignore");return null==(h=this.promises)[a]&&(h[a]=c.Deferred()),g={},b.isFunction(e.extend)||(e.extend=d.Model.extend),g.constructor=b.isFunction(e)?e:function(){return b.clone(e)},g.constructor.prototype.__factory=function(){return i},g.options=f,g.tags=b.uniq([a].concat(f.tags)).filter(function(a){return!!a}),this.instances[a]=[],b.each(g.tags,function(a){return this.tagMap[a]=this.tagMap[a]||[],this.tagCbs[a]=this.tagCbs[a]||[]},this),this.definitions[a]=g,this.trigger("define",g),this.promises[a].resolve(this,a),this},e.prototype.hasDefinition=function(a){return!!this.definitions[a]},e.prototype.whenDefined=function(a){var b;return null==(b=this.promises)[a]&&(b[a]=c.Deferred()),this.promises[a].promise()},e.prototype.fetchDefinition=function(a){var b,c=this;return b=this.whenDefined(a),require([a],function(b){return c.define(a,b)}),b},e.prototype.extend=function(a,c,d,e){var f;if(null==e&&(e={}),f=this.definitions[a],!f)throw new Error("Base Class Not Available :: "+a);if(!b.isObject(d))throw new Error("Invalid Parameter Definition :: expected object :: got "+d.constructor.prototype.toString());return e.tags=[].concat(f.tags,e.tags),this.define(c,f.constructor.extend(d),e)},e.prototype.clone=function(a){if(!(a instanceof e))throw new Error("Invalid Argument :: Expected Factory");return b.each(["definitions","mixins","promises"],function(c){return b.defaults(this[c],a[c]),"definitions"===c?b.each(this[c],function(a,b){var d=this;return this[c][b].constructor.prototype.__factory=function(){return d}},this):void 0},this)},e.prototype.defineMixin=function(a,b,c){if(null==c&&(c={}),null!=this.mixins[a]&&!c.override)throw new Error("Mixin already defined :: "+a+" :: use override option to ignore");return this.mixins[a]=b,this},e.prototype.handleMixins=function(a,c){return b.each(c,function(c){var d;if(d=this.mixins[c],!d)throw new Error("Mixin Not Defined :: "+c);return a.mixinOptions=a.mixinOptions||{},b.defaults(a.mixinOptions,d.mixinOptions||{}),b.extend(a,b.omit(d,"mixinOptions")),b.isFunction(a.mixinitialize)?(a.mixinitialize(),a.mixinitialize=function(){}):void 0},this)},e.prototype.handleInjections=function(a,c){return b.each(c,function(b){return a[b]=this.get(b)},this)},e.prototype.handleCreate=function(a){return b.each(a.__tags(),function(c){var d;return d=this.tagCbs[c],0!==d.length?b.each(d,function(c){return b.isFunction(c)?c(a):void 0},this):void 0},this)},e.prototype.handleTags=function(a,c,d){var e;return this.instances[a].push(c),c.__type=function(){return a},c.__tags=function(){return[].slice.call(d)},e=[this.instances[a]],b.each(d,function(a){return this.tagMap[a].push(c),e.push(this.tagMap[a])},this),c.__factoryMap=function(){return[].slice.call(e)}},e.prototype.get=function(){var c,d,e,f,g,h,i,j,k,l,m;if(j=arguments[0],c=2<=arguments.length?a.call(arguments,1):[],h=null!=(m=this.instances)[j]?(m=this.instances)[j]:m[j]=[],g=this.instances[j][0],e=this.definitions[j],null==e)throw new Error("Invalid Definition :: "+j+" :: not defined");return d=e.constructor,k=e.options||{},l=!!k.singleton,i=k.mixins||[],f=k.injections||[],l&&g?g:(g=function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(d,c,function(){}),this.handleMixins(g,i),this.handleInjections(g,f),this.handleTags(j,g,e.tags),b.isFunction(g.constructed)&&g.constructed(),g.__dispose=function(a){return function(){return a.dispose(this)}}(this),this.trigger("create",g),g)},e.prototype.verifyTags=function(a){return b.all(a.__factoryMap(),function(b){return-1!==b.indexOf(a)})},e.prototype.dispose=function(a){return b.each(a.__factoryMap(),function(b){if(-1===b.indexOf(a))throw new Error("Instance Not In Factory :: "+a+" :: disposal failed!");return b.splice(b.indexOf(a),1),this.trigger("dispose",a)},this)},e.prototype.getConstructor=function(a,c){return null==c&&(c=!1),c?this.definitions[a].constructor:b.chain(this.get).bind(this).partial(a).value()},e.prototype.onTag=function(a,c){var d;if(!b.isString(a))throw new Error("Invalid Argument :: "+typeof a+" provided :: expected String");if(!b.isFunction(c))throw new Error("Invalid Argument :: "+typeof c+" provided :: expected Function");return b.each(this.tagMap[a],c),null==(d=this.tagCbs)[a]&&(d[a]=[]),this.tagCbs[a].push(c)},e.prototype.offTag=function(a,c){var d;if(!b.isString(a))throw new Error("Invalid Argument :: "+typeof a+" provided :: expected String");if(null!=this.tagCbs[a]){if(!b.isFunction(c))return this.tagCbs[a]=[],void 0;if(d=this.tagCbs[a].indexOf(c),-1===d)throw new Error("Callback Not Found :: "+c+" :: for tag "+a);return this.tagCbs[a].splice(d,1)}},e.prototype.isType=function(a,b){return a.__type()===b},e.prototype.getType=function(a){return a.__type()},e}()})}.call(this);